{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createHTMLParagraph = exports.createHTMLLabel = exports.createHTMLInput = exports.createHTMLImage = exports.createHTMLIframe = exports.createHTMLDivision = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.createShorthand = createShorthand;\nexports.createShorthandFactory = createShorthandFactory;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // ============================================================\n// Factories\n// ============================================================\n\n/**\n * A more robust React.createElement. It can create elements from primitive values.\n *\n * @param {function|string} Component A ReactClass or string\n * @param {function} mapValueToProps A function that maps a primitive value to the Component props\n * @param {string|object|function} val The value to create a ReactElement from\n * @param {Object} [options={}]\n * @param {object} [options.defaultProps={}] Default props object\n * @param {object|function} [options.overrideProps={}] Override props object or function (called with regular props)\n * @param {boolean} [options.autoGenerateKey=true] Whether or not automatic key generation is allowed\n * @returns {object|null}\n */\n\n\nfunction createShorthand(Component, mapValueToProps, val) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthand() Component must be a string or function.');\n  } // short circuit noop values\n\n\n  if (_lodash2.default.isNil(val) || _lodash2.default.isBoolean(val)) return null;\n\n  var valIsString = _lodash2.default.isString(val);\n\n  var valIsNumber = _lodash2.default.isNumber(val);\n\n  var valIsFunction = _lodash2.default.isFunction(val);\n\n  var valIsReactElement = (0, _react.isValidElement)(val);\n\n  var valIsPropsObject = _lodash2.default.isPlainObject(val);\n\n  var valIsPrimitiveValue = valIsString || valIsNumber || _lodash2.default.isArray(val); // unhandled type return null\n\n  /* eslint-disable no-console */\n\n\n  if (!valIsFunction && !valIsReactElement && !valIsPropsObject && !valIsPrimitiveValue) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(['Shorthand value must be a string|number|array|object|ReactElement|function.', ' Use null|undefined|boolean for none', ' Received ' + (typeof val === 'undefined' ? 'undefined' : _typeof(val)) + '.'].join(''));\n    }\n\n    return null;\n  }\n  /* eslint-enable no-console */\n  // ----------------------------------------\n  // Build up props\n  // ----------------------------------------\n\n\n  var _options$defaultProps = options.defaultProps,\n      defaultProps = _options$defaultProps === undefined ? {} : _options$defaultProps; // User's props\n\n  var usersProps = valIsReactElement && val.props || valIsPropsObject && val || valIsPrimitiveValue && mapValueToProps(val); // Override props\n\n  var _options$overrideProp = options.overrideProps,\n      overrideProps = _options$overrideProp === undefined ? {} : _options$overrideProp;\n  overrideProps = _lodash2.default.isFunction(overrideProps) ? overrideProps(Object.assign({}, defaultProps, usersProps)) : overrideProps; // Merge props\n\n  /* eslint-disable react/prop-types */\n\n  var props = Object.assign({}, defaultProps, usersProps, overrideProps); // Merge className\n\n  if (defaultProps.className || overrideProps.className || usersProps.className) {\n    var mergedClassesNames = (0, _classnames2.default)(defaultProps.className, overrideProps.className, usersProps.className);\n    props.className = _lodash2.default.uniq(mergedClassesNames.split(' ')).join(' ');\n  } // Merge style\n\n\n  if (defaultProps.style || overrideProps.style || usersProps.style) {\n    props.style = Object.assign({}, defaultProps.style, usersProps.style, overrideProps.style);\n  } // ----------------------------------------\n  // Get key\n  // ----------------------------------------\n  // Use key, childKey, or generate key\n\n\n  if (_lodash2.default.isNil(props.key)) {\n    var childKey = props.childKey;\n    var _options$autoGenerate = options.autoGenerateKey,\n        autoGenerateKey = _options$autoGenerate === undefined ? true : _options$autoGenerate;\n\n    if (!_lodash2.default.isNil(childKey)) {\n      // apply and consume the childKey\n      props.key = typeof childKey === 'function' ? childKey(props) : childKey;\n      delete props.childKey;\n    } else if (autoGenerateKey && (valIsString || valIsNumber)) {\n      // use string/number shorthand values as the key\n      props.key = val;\n    }\n  } // ----------------------------------------\n  // Create Element\n  // ----------------------------------------\n  // Clone ReactElements\n\n\n  if (valIsReactElement) return (0, _react.cloneElement)(val, props); // Create ReactElements from built up props\n\n  if (valIsPrimitiveValue || valIsPropsObject) return _react2.default.createElement(Component, props); // Call functions with args similar to createElement()\n\n  if (valIsFunction) return val(Component, props, props.children);\n  /* eslint-enable react/prop-types */\n} // ============================================================\n// Factory Creators\n// ============================================================\n\n/**\n * Creates a `createShorthand` function that is waiting for a value and options.\n *\n * @param {function|string} Component A ReactClass or string\n * @param {function} mapValueToProps A function that maps a primitive value to the Component props\n * @returns {function} A shorthand factory function waiting for `val` and `defaultProps`.\n */\n\n\nfunction createShorthandFactory(Component, mapValueToProps) {\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthandFactory() Component must be a string or function.');\n  }\n\n  return function (val, options) {\n    return createShorthand(Component, mapValueToProps, val, options);\n  };\n} // ============================================================\n// HTML Factories\n// ============================================================\n\n\nvar createHTMLDivision = exports.createHTMLDivision = createShorthandFactory('div', function (val) {\n  return {\n    children: val\n  };\n});\nvar createHTMLIframe = exports.createHTMLIframe = createShorthandFactory('iframe', function (src) {\n  return {\n    src: src\n  };\n});\nvar createHTMLImage = exports.createHTMLImage = createShorthandFactory('img', function (val) {\n  return {\n    src: val\n  };\n});\nvar createHTMLInput = exports.createHTMLInput = createShorthandFactory('input', function (val) {\n  return {\n    type: val\n  };\n});\nvar createHTMLLabel = exports.createHTMLLabel = createShorthandFactory('label', function (val) {\n  return {\n    children: val\n  };\n});\nvar createHTMLParagraph = exports.createHTMLParagraph = createShorthandFactory('p', function (val) {\n  return {\n    children: val\n  };\n});","map":null,"metadata":{},"sourceType":"script"}