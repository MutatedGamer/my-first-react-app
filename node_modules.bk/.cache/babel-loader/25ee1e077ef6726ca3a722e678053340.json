{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lib = require('../../lib');\n\nvar _CardDescription = require('./CardDescription');\n\nvar _CardDescription2 = _interopRequireDefault(_CardDescription);\n\nvar _CardHeader = require('./CardHeader');\n\nvar _CardHeader2 = _interopRequireDefault(_CardHeader);\n\nvar _CardMeta = require('./CardMeta');\n\nvar _CardMeta2 = _interopRequireDefault(_CardMeta);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = (0, _classnames2.default)((0, _lib.useKeyOnly)(extra, 'extra'), (0, _lib.useTextAlignProp)(textAlign), 'content', className);\n  var rest = (0, _lib.getUnhandledProps)(CardContent, props);\n  var ElementType = (0, _lib.getElementType)(CardContent, props);\n\n  if (!_lib.childrenUtils.isNil(children)) {\n    return _react2.default.createElement(ElementType, Object.assign({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!_lib.childrenUtils.isNil(content)) {\n    return _react2.default.createElement(ElementType, Object.assign({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return _react2.default.createElement(ElementType, Object.assign({}, rest, {\n    className: classes\n  }), (0, _lib.createShorthand)(_CardHeader2.default, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), (0, _lib.createShorthand)(_CardMeta2.default, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), (0, _lib.createShorthand)(_CardDescription2.default, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.propTypes = {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** Primary content. */\n  children: _propTypes2.default.node,\n\n  /** Additional classes. */\n  className: _propTypes2.default.string,\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: _lib.customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: _propTypes2.default.bool,\n\n  /** Shorthand for CardHeader. */\n  header: _lib.customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: _lib.customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: _propTypes2.default.oneOf(_lodash2.default.without(_lib.SUI.TEXT_ALIGNMENTS, 'justified'))\n};\nexports.default = CardContent;","map":null,"metadata":{},"sourceType":"script"}