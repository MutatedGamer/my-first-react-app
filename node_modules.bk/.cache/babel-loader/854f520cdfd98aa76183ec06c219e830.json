{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lib = require('../../lib');\n\nvar _Dimmer = require('../../modules/Dimmer');\n\nvar _Dimmer2 = _interopRequireDefault(_Dimmer);\n\nvar _Label = require('../Label/Label');\n\nvar _Label2 = _interopRequireDefault(_Label);\n\nvar _ImageGroup = require('./ImageGroup');\n\nvar _ImageGroup2 = _interopRequireDefault(_ImageGroup);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * An image is a graphic representation of something.\n * @see Icon\n */\n\n\nfunction Image(props) {\n  var avatar = props.avatar,\n      bordered = props.bordered,\n      centered = props.centered,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      content = props.content,\n      dimmer = props.dimmer,\n      disabled = props.disabled,\n      floated = props.floated,\n      fluid = props.fluid,\n      hidden = props.hidden,\n      href = props.href,\n      inline = props.inline,\n      label = props.label,\n      rounded = props.rounded,\n      size = props.size,\n      spaced = props.spaced,\n      verticalAlign = props.verticalAlign,\n      wrapped = props.wrapped,\n      ui = props.ui;\n  var classes = (0, _classnames2.default)((0, _lib.useKeyOnly)(ui, 'ui'), size, (0, _lib.useKeyOnly)(avatar, 'avatar'), (0, _lib.useKeyOnly)(bordered, 'bordered'), (0, _lib.useKeyOnly)(circular, 'circular'), (0, _lib.useKeyOnly)(centered, 'centered'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(hidden, 'hidden'), (0, _lib.useKeyOnly)(inline, 'inline'), (0, _lib.useKeyOnly)(rounded, 'rounded'), (0, _lib.useKeyOrValueAndKey)(spaced, 'spaced'), (0, _lib.useValueAndKey)(floated, 'floated'), (0, _lib.useVerticalAlignProp)(verticalAlign, 'aligned'), 'image', className);\n  var rest = (0, _lib.getUnhandledProps)(Image, props);\n\n  var _partitionHTMLProps = (0, _lib.partitionHTMLProps)(rest, {\n    htmlProps: _lib.htmlImageProps\n  }),\n      _partitionHTMLProps2 = _slicedToArray(_partitionHTMLProps, 2),\n      imgTagProps = _partitionHTMLProps2[0],\n      rootProps = _partitionHTMLProps2[1];\n\n  var ElementType = (0, _lib.getElementType)(Image, props, function () {\n    if (!_lodash2.default.isNil(dimmer) || !_lodash2.default.isNil(label) || !_lodash2.default.isNil(wrapped) || !_lib.childrenUtils.isNil(children)) {\n      return 'div';\n    }\n  });\n\n  if (!_lib.childrenUtils.isNil(children)) {\n    return _react2.default.createElement(ElementType, Object.assign({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!_lib.childrenUtils.isNil(content)) {\n    return _react2.default.createElement(ElementType, Object.assign({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  if (ElementType === 'img') {\n    return _react2.default.createElement(ElementType, Object.assign({}, rootProps, imgTagProps, {\n      className: classes\n    }));\n  }\n\n  return _react2.default.createElement(ElementType, Object.assign({}, rootProps, {\n    className: classes,\n    href: href\n  }), _Dimmer2.default.create(dimmer, {\n    autoGenerateKey: false\n  }), _Label2.default.create(label, {\n    autoGenerateKey: false\n  }), _react2.default.createElement('img', imgTagProps));\n}\n\nImage.Group = _ImageGroup2.default;\nImage.propTypes = {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** An image may be formatted to appear inline with text as an avatar. */\n  avatar: _propTypes2.default.bool,\n\n  /** An image may include a border to emphasize the edges of white or transparent content. */\n  bordered: _propTypes2.default.bool,\n\n  /** An image can appear centered in a content block. */\n  centered: _propTypes2.default.bool,\n\n  /** Primary content. */\n  children: _propTypes2.default.node,\n\n  /** An image may appear circular. */\n  circular: _propTypes2.default.bool,\n\n  /** Additional classes. */\n  className: _propTypes2.default.string,\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /** An image can show that it is disabled and cannot be selected. */\n  disabled: _propTypes2.default.bool,\n\n  /** Shorthand for Dimmer. */\n  dimmer: _lib.customPropTypes.itemShorthand,\n\n  /** An image can sit to the left or right of other content. */\n  floated: _propTypes2.default.oneOf(_lib.SUI.FLOATS),\n\n  /** An image can take up the width of its container. */\n  fluid: _lib.customPropTypes.every([_propTypes2.default.bool, _lib.customPropTypes.disallow(['size'])]),\n\n  /** An image can be hidden. */\n  hidden: _propTypes2.default.bool,\n\n  /** Renders the Image as an <a> tag with this href. */\n  href: _propTypes2.default.string,\n\n  /** An image may appear inline. */\n  inline: _propTypes2.default.bool,\n\n  /** Shorthand for Label. */\n  label: _lib.customPropTypes.itemShorthand,\n\n  /** An image may appear rounded. */\n  rounded: _propTypes2.default.bool,\n\n  /** An image may appear at different sizes. */\n  size: _propTypes2.default.oneOf(_lib.SUI.SIZES),\n\n  /** An image can specify that it needs an additional spacing to separate it from nearby content. */\n  spaced: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['left', 'right'])]),\n\n  /** Whether or not to add the ui className. */\n  ui: _propTypes2.default.bool,\n\n  /** An image can specify its vertical alignment. */\n  verticalAlign: _propTypes2.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS),\n\n  /** An image can render wrapped in a `div.ui.image` as alternative HTML markup. */\n  wrapped: _propTypes2.default.bool\n};\nImage.defaultProps = {\n  as: 'img',\n  ui: true\n};\nImage.create = (0, _lib.createShorthandFactory)(Image, function (value) {\n  return {\n    src: value\n  };\n});\nexports.default = Image;","map":null,"metadata":{},"sourceType":"script"}