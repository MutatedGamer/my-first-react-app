{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Determines if a click's coordinates are within the bounds of a node.\n *\n * @see https://github.com/Semantic-Org/Semantic-UI-React/pull/2384\n *\n * @param {object} node - A DOM node.\n * @param {object} e - A SyntheticEvent or DOM Event.\n * @returns {boolean}\n */\n\n\nvar doesNodeContainClick = function doesNodeContainClick(node, e) {\n  if (_lodash2.default.some([e, node], _lodash2.default.isNil)) return false; // if there is an e.target and it is in the document, use a simple node.contains() check\n\n  if (e.target) {\n    _lodash2.default.invoke(e.target, 'setAttribute', 'data-suir-click-target', true);\n\n    if (document.querySelector('[data-suir-click-target=true]')) {\n      _lodash2.default.invoke(e.target, 'removeAttribute', 'data-suir-click-target');\n\n      return node.contains(e.target);\n    }\n  } // Below logic handles cases where the e.target is no longer in the document.\n  // The result of the click likely has removed the e.target node.\n  // Instead of node.contains(), we'll identify the click by X/Y position.\n  // return early if the event properties aren't available\n  // prevent measuring the node and repainting if we don't need to\n\n\n  var clientX = e.clientX,\n      clientY = e.clientY;\n  if (_lodash2.default.some([clientX, clientY], _lodash2.default.isNil)) return false; // false if the node is not visible\n\n  var clientRects = node.getClientRects(); // Heads Up!\n  // getClientRects returns a DOMRectList, not an array nor a plain object\n  // We explicitly avoid _.isEmpty and check .length to cover all possible shapes\n\n  if (!node.offsetWidth || !node.offsetHeight || !clientRects || !clientRects.length) return false; // false if the node doesn't have a valid bounding rect\n\n  var _$first = _lodash2.default.first(clientRects),\n      top = _$first.top,\n      bottom = _$first.bottom,\n      left = _$first.left,\n      right = _$first.right;\n\n  if (_lodash2.default.some([top, bottom, left, right], _lodash2.default.isNil)) return false; // we add a small decimal to the upper bound just to make it inclusive\n  // don't add an whole pixel (1) as the event/node values may be decimal sensitive\n\n  return _lodash2.default.inRange(clientY, top, bottom + 0.001) && _lodash2.default.inRange(clientX, left, right + 0.001);\n};\n\nexports.default = doesNodeContainClick;","map":null,"metadata":{},"sourceType":"script"}