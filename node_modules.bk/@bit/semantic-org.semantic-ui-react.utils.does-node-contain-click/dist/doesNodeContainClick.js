'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Determines if a click's coordinates are within the bounds of a node.
 *
 * @see https://github.com/Semantic-Org/Semantic-UI-React/pull/2384
 *
 * @param {object} node - A DOM node.
 * @param {object} e - A SyntheticEvent or DOM Event.
 * @returns {boolean}
 */
var doesNodeContainClick = function doesNodeContainClick(node, e) {
  if (_lodash2.default.some([e, node], _lodash2.default.isNil)) return false;

  // if there is an e.target and it is in the document, use a simple node.contains() check
  if (e.target) {
    _lodash2.default.invoke(e.target, 'setAttribute', 'data-suir-click-target', true);

    if (document.querySelector('[data-suir-click-target=true]')) {
      _lodash2.default.invoke(e.target, 'removeAttribute', 'data-suir-click-target');
      return node.contains(e.target);
    }
  }

  // Below logic handles cases where the e.target is no longer in the document.
  // The result of the click likely has removed the e.target node.
  // Instead of node.contains(), we'll identify the click by X/Y position.

  // return early if the event properties aren't available
  // prevent measuring the node and repainting if we don't need to
  var clientX = e.clientX,
      clientY = e.clientY;

  if (_lodash2.default.some([clientX, clientY], _lodash2.default.isNil)) return false;

  // false if the node is not visible
  var clientRects = node.getClientRects();
  // Heads Up!
  // getClientRects returns a DOMRectList, not an array nor a plain object
  // We explicitly avoid _.isEmpty and check .length to cover all possible shapes
  if (!node.offsetWidth || !node.offsetHeight || !clientRects || !clientRects.length) return false;

  // false if the node doesn't have a valid bounding rect

  var _$first = _lodash2.default.first(clientRects),
      top = _$first.top,
      bottom = _$first.bottom,
      left = _$first.left,
      right = _$first.right;

  if (_lodash2.default.some([top, bottom, left, right], _lodash2.default.isNil)) return false;

  // we add a small decimal to the upper bound just to make it inclusive
  // don't add an whole pixel (1) as the event/node values may be decimal sensitive
  return _lodash2.default.inRange(clientY, top, bottom + 0.001) && _lodash2.default.inRange(clientX, left, right + 0.001);
};

exports.default = doesNodeContainClick;

//# sourceMappingURL=doesNodeContainClick.js.map