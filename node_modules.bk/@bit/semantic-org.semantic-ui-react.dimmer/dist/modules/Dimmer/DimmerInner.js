'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lib = require('../../lib');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An inner element for a Dimmer.
 */
var DimmerInner = (_temp2 = _class = function (_Component) {
  _inherits(DimmerInner, _Component);

  function DimmerInner() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DimmerInner);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DimmerInner.__proto__ || Object.getPrototypeOf(DimmerInner)).call.apply(_ref, [this].concat(args))), _this), _this.containerRef = (0, _react.createRef)(), _this.contentRef = (0, _react.createRef)(), _this.handleClick = function (e) {
      var contentRef = _this.contentRef.current;

      _lodash2.default.invoke(_this.props, 'onClick', e, _this.props);

      if (contentRef && contentRef !== e.target && (0, _lib.doesNodeContainClick)(contentRef, e)) {
        return;
      }

      _lodash2.default.invoke(_this.props, 'onClickOutside', e, _this.props);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DimmerInner, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var active = this.props.active;


      this.toggleStyles(active);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var currentActive = this.props.active;
      var prevActive = prevProps.active;


      if (prevActive !== currentActive) this.toggleStyles(currentActive);
    }
  }, {
    key: 'toggleStyles',
    value: function toggleStyles(active) {
      var containerRef = this.containerRef.current;

      if (!containerRef) return;

      if (active) {
        containerRef.style.setProperty('display', 'flex', 'important');
      } else {
        containerRef.style.removeProperty('display');
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          active = _props.active,
          children = _props.children,
          className = _props.className,
          content = _props.content,
          disabled = _props.disabled,
          inverted = _props.inverted,
          page = _props.page,
          simple = _props.simple,
          verticalAlign = _props.verticalAlign;


      var classes = (0, _classnames2.default)('ui', (0, _lib.useKeyOnly)(active, 'active transition visible'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(page, 'page'), (0, _lib.useKeyOnly)(simple, 'simple'), (0, _lib.useVerticalAlignProp)(verticalAlign), 'dimmer', className);
      var rest = (0, _lib.getUnhandledProps)(DimmerInner, this.props);
      var ElementType = (0, _lib.getElementType)(DimmerInner, this.props);

      var childrenContent = _lib.childrenUtils.isNil(children) ? content : children;

      return _react2.default.createElement(
        ElementType,
        Object.assign({}, rest, { className: classes, onClick: this.handleClick, ref: this.containerRef }),
        childrenContent && _react2.default.createElement(
          'div',
          { className: 'content', ref: this.contentRef },
          childrenContent
        )
      );
    }
  }]);

  return DimmerInner;
}(_react.Component), _class.propTypes = {
  /** An element type to render as (string or function). */
  as: _lib.customPropTypes.as,

  /** An active dimmer will dim its parent container. */
  active: _propTypes2.default.bool,

  /** Primary content. */
  children: _propTypes2.default.node,

  /** Additional classes. */
  className: _propTypes2.default.string,

  /** Shorthand for primary content. */
  content: _lib.customPropTypes.contentShorthand,

  /** A disabled dimmer cannot be activated */
  disabled: _propTypes2.default.bool,

  /**
   * Called on click.
   *
   * @param {SyntheticEvent} event - React's original SyntheticEvent.
   * @param {object} data - All props.
   */
  onClick: _propTypes2.default.func,

  /**
   * Handles click outside Dimmer's content, but inside Dimmer area.
   *
   * @param {SyntheticEvent} event - React's original SyntheticEvent.
   * @param {object} data - All props.
   */
  onClickOutside: _propTypes2.default.func,

  /** A dimmer can be formatted to have its colors inverted. */
  inverted: _propTypes2.default.bool,

  /** A dimmer can be formatted to be fixed to the page. */
  page: _propTypes2.default.bool,

  /** A dimmer can be controlled with simple prop. */
  simple: _propTypes2.default.bool,

  /** A dimmer can have its content top or bottom aligned. */
  verticalAlign: _propTypes2.default.oneOf(['bottom', 'top'])
}, _temp2);
exports.default = DimmerInner;

//# sourceMappingURL=DimmerInner.js.map