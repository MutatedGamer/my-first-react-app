'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _lib = require('../../lib');

var _Ref = require('../Ref');

var _Ref2 = _interopRequireDefault(_Ref);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = (0, _lib.makeDebugger)('portalInner');

/**
 * An inner component that allows you to render children outside their parent.
 */
var PortalInner = (_temp2 = _class = function (_Component) {
  _inherits(PortalInner, _Component);

  function PortalInner() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, PortalInner);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PortalInner.__proto__ || Object.getPrototypeOf(PortalInner)).call.apply(_ref, [this].concat(args))), _this), _this.handleRef = function (c) {
      debug('handleRef');
      _this.ref = c;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(PortalInner, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      debug('componentDidMount()');
      _lodash2.default.invoke(this.props, 'onMount', null, Object.assign({}, this.props, { node: this.ref }));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      debug('componentWillUnmount()');
      _lodash2.default.invoke(this.props, 'onUnmount', null, Object.assign({}, this.props, { node: this.ref }));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          _props$mountNode = _props.mountNode,
          mountNode = _props$mountNode === undefined ? (0, _lib.isBrowser)() ? document.body : null : _props$mountNode;


      return (0, _reactDom.createPortal)(_react2.default.createElement(
        _Ref2.default,
        { innerRef: this.handleRef },
        children
      ), mountNode);
    }
  }]);

  return PortalInner;
}(_react.Component), _class.propTypes = {
  /** Primary content. */
  children: _propTypes2.default.node.isRequired,

  /** The node where the portal should mount. */
  mountNode: _propTypes2.default.any,

  /**
   * Called when the portal is mounted on the DOM
   *
   * @param {null}
   * @param {object} data - All props.
   */
  onMount: _propTypes2.default.func,

  /**
   * Called when the portal is unmounted from the DOM
   *
   * @param {null}
   * @param {object} data - All props.
   */
  onUnmount: _propTypes2.default.func
}, _temp2);
exports.default = PortalInner;

//# sourceMappingURL=PortalInner.js.map