'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _keyboardKey = require('keyboard-key');

var _keyboardKey2 = _interopRequireDefault(_keyboardKey);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lib = require('../../lib');

var _Ref = require('../Ref');

var _Ref2 = _interopRequireDefault(_Ref);

var _PortalInner = require('./PortalInner');

var _PortalInner2 = _interopRequireDefault(_PortalInner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = (0, _lib.makeDebugger)('portal');

/**
 * A component that allows you to render children outside their parent.
 * @see Modal
 * @see Popup
 * @see Dimmer
 * @see Confirm
 */
var Portal = (_temp2 = _class = function (_Component) {
  _inherits(Portal, _Component);

  function Portal() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Portal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Portal.__proto__ || Object.getPrototypeOf(Portal)).call.apply(_ref, [this].concat(args))), _this), _this.handleDocumentClick = function (e) {
      var closeOnDocumentClick = _this.props.closeOnDocumentClick;


      if (!_this.portalNode || // no portal
      (0, _lib.doesNodeContainClick)(_this.triggerNode, e) || // event happened in trigger (delegate to trigger handlers)
      (0, _lib.doesNodeContainClick)(_this.portalNode, e) // event happened in the portal
      ) {
          return;
        } // ignore the click

      if (closeOnDocumentClick) {
        debug('handleDocumentClick()');
        _this.close(e);
      }
    }, _this.handleEscape = function (e) {
      if (!_this.props.closeOnEscape) return;
      if (_keyboardKey2.default.getCode(e) !== _keyboardKey2.default.Escape) return;

      debug('handleEscape()');
      _this.close(e);
    }, _this.handlePortalMouseLeave = function (e) {
      var _this$props = _this.props,
          closeOnPortalMouseLeave = _this$props.closeOnPortalMouseLeave,
          mouseLeaveDelay = _this$props.mouseLeaveDelay;


      if (!closeOnPortalMouseLeave) return;

      // Do not close the portal when 'mouseleave' is triggered by children
      if (e.target !== _this.portalNode) return;

      debug('handlePortalMouseLeave()');
      _this.mouseLeaveTimer = _this.closeWithTimeout(e, mouseLeaveDelay);
    }, _this.handlePortalMouseEnter = function () {
      // In order to enable mousing from the trigger to the portal, we need to
      // clear the mouseleave timer that was set when leaving the trigger.
      var closeOnPortalMouseLeave = _this.props.closeOnPortalMouseLeave;


      if (!closeOnPortalMouseLeave) return;

      debug('handlePortalMouseEnter()');
      clearTimeout(_this.mouseLeaveTimer);
    }, _this.handleTriggerBlur = function (e) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        rest[_key2 - 1] = arguments[_key2];
      }

      var _this$props2 = _this.props,
          trigger = _this$props2.trigger,
          closeOnTriggerBlur = _this$props2.closeOnTriggerBlur;

      // Call original event handler

      _lodash2.default.invoke.apply(_lodash2.default, [trigger, 'props.onBlur', e].concat(rest));

      // IE 11 doesn't work with relatedTarget in blur events
      var target = e.relatedTarget || document.activeElement;
      // do not close if focus is given to the portal
      var didFocusPortal = _lodash2.default.invoke(_this, 'portalNode.contains', target);

      if (!closeOnTriggerBlur || didFocusPortal) return;

      debug('handleTriggerBlur()');
      _this.close(e);
    }, _this.handleTriggerClick = function (e) {
      for (var _len3 = arguments.length, rest = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        rest[_key3 - 1] = arguments[_key3];
      }

      var _this$props3 = _this.props,
          trigger = _this$props3.trigger,
          closeOnTriggerClick = _this$props3.closeOnTriggerClick,
          openOnTriggerClick = _this$props3.openOnTriggerClick;
      var open = _this.state.open;

      // Call original event handler

      _lodash2.default.invoke.apply(_lodash2.default, [trigger, 'props.onClick', e].concat(rest));

      if (open && closeOnTriggerClick) {
        debug('handleTriggerClick() - close');

        _this.close(e);
      } else if (!open && openOnTriggerClick) {
        debug('handleTriggerClick() - open');

        _this.open(e);
      }
    }, _this.handleTriggerFocus = function (e) {
      for (var _len4 = arguments.length, rest = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        rest[_key4 - 1] = arguments[_key4];
      }

      var _this$props4 = _this.props,
          trigger = _this$props4.trigger,
          openOnTriggerFocus = _this$props4.openOnTriggerFocus;

      // Call original event handler

      _lodash2.default.invoke.apply(_lodash2.default, [trigger, 'props.onFocus', e].concat(rest));

      if (!openOnTriggerFocus) return;

      debug('handleTriggerFocus()');
      _this.open(e);
    }, _this.handleTriggerMouseLeave = function (e) {
      for (var _len5 = arguments.length, rest = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        rest[_key5 - 1] = arguments[_key5];
      }

      clearTimeout(_this.mouseEnterTimer);

      var _this$props5 = _this.props,
          trigger = _this$props5.trigger,
          closeOnTriggerMouseLeave = _this$props5.closeOnTriggerMouseLeave,
          mouseLeaveDelay = _this$props5.mouseLeaveDelay;

      // Call original event handler

      _lodash2.default.invoke.apply(_lodash2.default, [trigger, 'props.onMouseLeave', e].concat(rest));

      if (!closeOnTriggerMouseLeave) return;

      debug('handleTriggerMouseLeave()');
      _this.mouseLeaveTimer = _this.closeWithTimeout(e, mouseLeaveDelay);
    }, _this.handleTriggerMouseEnter = function (e) {
      for (var _len6 = arguments.length, rest = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        rest[_key6 - 1] = arguments[_key6];
      }

      clearTimeout(_this.mouseLeaveTimer);

      var _this$props6 = _this.props,
          trigger = _this$props6.trigger,
          mouseEnterDelay = _this$props6.mouseEnterDelay,
          openOnTriggerMouseEnter = _this$props6.openOnTriggerMouseEnter;

      // Call original event handler

      _lodash2.default.invoke.apply(_lodash2.default, [trigger, 'props.onMouseEnter', e].concat(rest));

      if (!openOnTriggerMouseEnter) return;

      debug('handleTriggerMouseEnter()');
      _this.mouseEnterTimer = _this.openWithTimeout(e, mouseEnterDelay);
    }, _this.open = function (e) {
      debug('open()');

      var onOpen = _this.props.onOpen;

      if (onOpen) onOpen(e, _this.props);

      _this.trySetState({ open: true });
    }, _this.openWithTimeout = function (e, delay) {
      debug('openWithTimeout()', delay);
      // React wipes the entire event object and suggests using e.persist() if
      // you need the event for async access. However, even with e.persist
      // certain required props (e.g. currentTarget) are null so we're forced to clone.
      var eventClone = Object.assign({}, e);
      return setTimeout(function () {
        return _this.open(eventClone);
      }, delay || 0);
    }, _this.close = function (e) {
      debug('close()');

      var onClose = _this.props.onClose;

      if (onClose) onClose(e, _this.props);

      _this.trySetState({ open: false });
    }, _this.closeWithTimeout = function (e, delay) {
      debug('closeWithTimeout()', delay);
      // React wipes the entire event object and suggests using e.persist() if
      // you need the event for async access. However, even with e.persist
      // certain required props (e.g. currentTarget) are null so we're forced to clone.
      var eventClone = Object.assign({}, e);
      return setTimeout(function () {
        return _this.close(eventClone);
      }, delay || 0);
    }, _this.handleMount = function (e, _ref2) {
      var target = _ref2.node;

      debug('handleMount()');
      var eventPool = _this.props.eventPool;


      _this.portalNode = target;

      _lib.eventStack.sub('mouseleave', _this.handlePortalMouseLeave, { pool: eventPool, target: target });
      _lib.eventStack.sub('mouseenter', _this.handlePortalMouseEnter, { pool: eventPool, target: target });
      _lib.eventStack.sub('click', _this.handleDocumentClick, { pool: eventPool });
      _lib.eventStack.sub('keydown', _this.handleEscape, { pool: eventPool });

      _lodash2.default.invoke(_this.props, 'onMount', null, _this.props);
    }, _this.handleUnmount = function (e, _ref3) {
      var target = _ref3.node;

      debug('handleUnmount()');
      var eventPool = _this.props.eventPool;


      _this.portalNode = null;

      _lib.eventStack.unsub('mouseleave', _this.handlePortalMouseLeave, { pool: eventPool, target: target });
      _lib.eventStack.unsub('mouseenter', _this.handlePortalMouseEnter, { pool: eventPool, target: target });
      _lib.eventStack.unsub('click', _this.handleDocumentClick, { pool: eventPool });
      _lib.eventStack.unsub('keydown', _this.handleEscape, { pool: eventPool });

      _lodash2.default.invoke(_this.props, 'onUnmount', null, _this.props);
    }, _this.handleTriggerRef = function (c) {
      debug('handleTriggerRef()');
      _this.triggerNode = c;
      (0, _lib.handleRef)(_this.props.triggerRef, c);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Portal, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      // Clean up timers
      clearTimeout(this.mouseEnterTimer);
      clearTimeout(this.mouseLeaveTimer);
    }

    // ----------------------------------------
    // Document Event Handlers
    // ----------------------------------------

    // ----------------------------------------
    // Component Event Handlers
    // ----------------------------------------

    // ----------------------------------------
    // Behavior
    // ----------------------------------------

  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          mountNode = _props.mountNode,
          trigger = _props.trigger;
      var open = this.state.open;


      return _react2.default.createElement(
        _react.Fragment,
        null,
        open && _react2.default.createElement(
          _PortalInner2.default,
          {
            mountNode: mountNode,
            onMount: this.handleMount,
            onUnmount: this.handleUnmount
          },
          children
        ),
        trigger && _react2.default.createElement(
          _Ref2.default,
          { innerRef: this.handleTriggerRef },
          (0, _react.cloneElement)(trigger, {
            onBlur: this.handleTriggerBlur,
            onClick: this.handleTriggerClick,
            onFocus: this.handleTriggerFocus,
            onMouseLeave: this.handleTriggerMouseLeave,
            onMouseEnter: this.handleTriggerMouseEnter
          })
        )
      );
    }
  }]);

  return Portal;
}(_lib.AutoControlledComponent), _class.propTypes = {
  /** Primary content. */
  children: _propTypes2.default.node.isRequired,

  /** Controls whether or not the portal should close when the document is clicked. */
  closeOnDocumentClick: _propTypes2.default.bool,

  /** Controls whether or not the portal should close when escape is pressed is displayed. */
  closeOnEscape: _propTypes2.default.bool,

  /**
   * Controls whether or not the portal should close when mousing out of the portal.
   * NOTE: This will prevent `closeOnTriggerMouseLeave` when mousing over the
   * gap from the trigger to the portal.
   */
  closeOnPortalMouseLeave: _propTypes2.default.bool,

  /** Controls whether or not the portal should close on blur of the trigger. */
  closeOnTriggerBlur: _propTypes2.default.bool,

  /** Controls whether or not the portal should close on click of the trigger. */
  closeOnTriggerClick: _propTypes2.default.bool,

  /** Controls whether or not the portal should close when mousing out of the trigger. */
  closeOnTriggerMouseLeave: _propTypes2.default.bool,

  /** Initial value of open. */
  defaultOpen: _propTypes2.default.bool,

  /** Event pool namespace that is used to handle component events */
  eventPool: _propTypes2.default.string,

  /** The node where the portal should mount. */
  mountNode: _propTypes2.default.any,

  /** Milliseconds to wait before opening on mouse over */
  mouseEnterDelay: _propTypes2.default.number,

  /** Milliseconds to wait before closing on mouse leave */
  mouseLeaveDelay: _propTypes2.default.number,

  /**
   * Called when a close event happens
   *
   * @param {SyntheticEvent} event - React's original SyntheticEvent.
   * @param {object} data - All props.
   */
  onClose: _propTypes2.default.func,

  /**
   * Called when the portal is mounted on the DOM.
   *
   * @param {null}
   * @param {object} data - All props.
   */
  onMount: _propTypes2.default.func,

  /**
   * Called when an open event happens
   *
   * @param {SyntheticEvent} event - React's original SyntheticEvent.
   * @param {object} data - All props.
   */
  onOpen: _propTypes2.default.func,

  /**
   * Called when the portal is unmounted from the DOM.
   *
   * @param {null}
   * @param {object} data - All props.
   */
  onUnmount: _propTypes2.default.func,

  /** Controls whether or not the portal is displayed. */
  open: _propTypes2.default.bool,

  /** Controls whether or not the portal should open when the trigger is clicked. */
  openOnTriggerClick: _propTypes2.default.bool,

  /** Controls whether or not the portal should open on focus of the trigger. */
  openOnTriggerFocus: _propTypes2.default.bool,

  /** Controls whether or not the portal should open when mousing over the trigger. */
  openOnTriggerMouseEnter: _propTypes2.default.bool,

  /** Element to be rendered in-place where the portal is defined. */
  trigger: _propTypes2.default.node,

  /**
   * Called with a ref to the trigger node.
   *
   * @param {HTMLElement} node - Referred node.
   */
  triggerRef: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object])
}, _class.defaultProps = {
  closeOnDocumentClick: true,
  closeOnEscape: true,
  eventPool: 'default',
  openOnTriggerClick: true
}, _class.autoControlledProps = ['open'], _class.Inner = _PortalInner2.default, _temp2);
exports.default = Portal;

//# sourceMappingURL=Portal.js.map