'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lib = require('../../lib');

var _IconGroup = require('./IconGroup');

var _IconGroup2 = _interopRequireDefault(_IconGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An icon is a glyph used to represent something else.
 * @see Image
 */
var Icon = (_temp2 = _class = function (_PureComponent) {
  _inherits(Icon, _PureComponent);

  function Icon() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Icon);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Icon.__proto__ || Object.getPrototypeOf(Icon)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function (e) {
      var disabled = _this.props.disabled;


      if (disabled) {
        e.preventDefault();
        return;
      }

      _lodash2.default.invoke(_this.props, 'onClick', e, _this.props);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Icon, [{
    key: 'getIconAriaOptions',
    value: function getIconAriaOptions() {
      var ariaOptions = {};
      var _props = this.props,
          ariaLabel = _props['aria-label'],
          ariaHidden = _props['aria-hidden'];


      if (_lodash2.default.isNil(ariaLabel)) {
        ariaOptions['aria-hidden'] = 'true';
      } else {
        ariaOptions['aria-label'] = ariaLabel;
      }

      if (!_lodash2.default.isNil(ariaHidden)) {
        ariaOptions['aria-hidden'] = ariaHidden;
      }

      return ariaOptions;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          bordered = _props2.bordered,
          circular = _props2.circular,
          className = _props2.className,
          color = _props2.color,
          corner = _props2.corner,
          disabled = _props2.disabled,
          fitted = _props2.fitted,
          flipped = _props2.flipped,
          inverted = _props2.inverted,
          link = _props2.link,
          loading = _props2.loading,
          name = _props2.name,
          rotated = _props2.rotated,
          size = _props2.size;


      var classes = (0, _classnames2.default)(color, name, size, (0, _lib.useKeyOnly)(bordered, 'bordered'), (0, _lib.useKeyOnly)(circular, 'circular'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(fitted, 'fitted'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(link, 'link'), (0, _lib.useKeyOnly)(loading, 'loading'), (0, _lib.useKeyOrValueAndKey)(corner, 'corner'), (0, _lib.useValueAndKey)(flipped, 'flipped'), (0, _lib.useValueAndKey)(rotated, 'rotated'), 'icon', className);
      var rest = (0, _lib.getUnhandledProps)(Icon, this.props);
      var ElementType = (0, _lib.getElementType)(Icon, this.props);
      var ariaOptions = this.getIconAriaOptions();

      return _react2.default.createElement(ElementType, Object.assign({}, rest, ariaOptions, { className: classes, onClick: this.handleClick }));
    }
  }]);

  return Icon;
}(_react.PureComponent), _class.propTypes = {
  /** An element type to render as (string or function). */
  as: _lib.customPropTypes.as,

  /** Formatted to appear bordered. */
  bordered: _propTypes2.default.bool,

  /** Icon can formatted to appear circular. */
  circular: _propTypes2.default.bool,

  /** Additional classes. */
  className: _propTypes2.default.string,

  /** Color of the icon. */
  color: _propTypes2.default.oneOf(_lib.SUI.COLORS),

  /** Icons can display a smaller corner icon. */
  corner: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['top left', 'top right', 'bottom left', 'bottom right'])]),

  /** Show that the icon is inactive. */
  disabled: _propTypes2.default.bool,

  /** Fitted, without space to left or right of Icon. */
  fitted: _propTypes2.default.bool,

  /** Icon can flipped. */
  flipped: _propTypes2.default.oneOf(['horizontally', 'vertically']),

  /** Formatted to have its colors inverted for contrast. */
  inverted: _propTypes2.default.bool,

  /** Icon can be formatted as a link. */
  link: _propTypes2.default.bool,

  /** Icon can be used as a simple loader. */
  loading: _propTypes2.default.bool,

  /** Name of the icon. */
  name: _lib.customPropTypes.suggest(_lib.SUI.ALL_ICONS_IN_ALL_CONTEXTS),

  /** Icon can rotated. */
  rotated: _propTypes2.default.oneOf(['clockwise', 'counterclockwise']),

  /** Size of the icon. */
  size: _propTypes2.default.oneOf(_lodash2.default.without(_lib.SUI.SIZES, 'medium')),

  /** Icon can have an aria label. */
  'aria-hidden': _propTypes2.default.string,

  /** Icon can have an aria label. */
  'aria-label': _propTypes2.default.string
}, _class.defaultProps = {
  as: 'i'
}, _class.Group = _IconGroup2.default, _temp2);


Icon.create = (0, _lib.createShorthandFactory)(Icon, function (value) {
  return { name: value };
});

exports.default = Icon;

//# sourceMappingURL=Icon.js.map